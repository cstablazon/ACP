//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACP
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class acpEntities : DbContext
    {
        public acpEntities()
            : base("name=acpEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_pool> C_pool { get; set; }
        public virtual DbSet<addressDIR> addressDIRs { get; set; }
        public virtual DbSet<auditTrail> auditTrails { get; set; }
        public virtual DbSet<brand> brands { get; set; }
        public virtual DbSet<contactDIR> contactDIRs { get; set; }
        public virtual DbSet<deliveryAddress> deliveryAddresses { get; set; }
        public virtual DbSet<invent_in> invent_in { get; set; }
        public virtual DbSet<inventLocation> inventLocations { get; set; }
        public virtual DbSet<modeOfDelivery> modeOfDeliveries { get; set; }
        public virtual DbSet<otherPrice> otherPrices { get; set; }
        public virtual DbSet<paymentTerm> paymentTerms { get; set; }
        public virtual DbSet<personDIR> personDIRs { get; set; }
        public virtual DbSet<prodInvent> prodInvents { get; set; }
        public virtual DbSet<product_subType> product_subType { get; set; }
        public virtual DbSet<product_type> product_type { get; set; }
        public virtual DbSet<site> sites { get; set; }
        public virtual DbSet<suppGroup> suppGroups { get; set; }
        public virtual DbSet<template> templates { get; set; }
        public virtual DbSet<testCatHierarchy> testCatHierarchies { get; set; }
        public virtual DbSet<UOM> UOMs { get; set; }
        public virtual DbSet<categoryHierarchy> categoryHierarchies { get; set; }
        public virtual DbSet<exchangeRate> exchangeRates { get; set; }
        public virtual DbSet<infoCategory> infoCategories { get; set; }
        public virtual DbSet<rsrvtnHierarchy> rsrvtnHierarchies { get; set; }
        public virtual DbSet<storageDmnsnGroup> storageDmnsnGroups { get; set; }
        public virtual DbSet<trackingDmnsnGroup> trackingDmnsnGroups { get; set; }
        public virtual DbSet<vwCatHierarchy> vwCatHierarchies { get; set; }
        public virtual DbSet<vwDeliveryAddress> vwDeliveryAddresses { get; set; }
        public virtual DbSet<vwDiscount> vwDiscounts { get; set; }
        public virtual DbSet<vwInventLocation> vwInventLocations { get; set; }
        public virtual DbSet<vwItemModelGroup> vwItemModelGroups { get; set; }
        public virtual DbSet<vwOtherPrice> vwOtherPrices { get; set; }
        public virtual DbSet<vwPOReport> vwPOReports { get; set; }
        public virtual DbSet<vwProdInvent> vwProdInvents { get; set; }
        public virtual DbSet<vwProductCost> vwProductCosts { get; set; }
        public virtual DbSet<vwSite> vwSites { get; set; }
        public virtual DbSet<vwAuditTrail> vwAuditTrails { get; set; }
        public virtual DbSet<vwUvalidation> vwUvalidations { get; set; }
        public virtual DbSet<vwProdPurchasing> vwProdPurchasings { get; set; }
        public virtual DbSet<contactType> contactTypes { get; set; }
        public virtual DbSet<authority> authorities { get; set; }
        public virtual DbSet<department> departments { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<user_tbl> user_tbl { get; set; }
        public virtual DbSet<vwCatHierarchyTree> vwCatHierarchyTrees { get; set; }
        public virtual DbSet<vwContactDIR> vwContactDIRs { get; set; }
        public virtual DbSet<purchase_order> purchase_order { get; set; }
        public virtual DbSet<vwPurchaseOrder> vwPurchaseOrders { get; set; }
        public virtual DbSet<receiving> receivings { get; set; }
        public virtual DbSet<PO_Line> PO_Line { get; set; }
        public virtual DbSet<vwPO_Line> vwPO_Line { get; set; }
        public virtual DbSet<vwLineDiscount> vwLineDiscounts { get; set; }
        public virtual DbSet<discount> discounts { get; set; }
        public virtual DbSet<profile> profiles { get; set; }
        public virtual DbSet<warehouse> warehouses { get; set; }
        public virtual DbSet<whLocation> whLocations { get; set; }
        public virtual DbSet<hierarchy> hierarchies { get; set; }
        public virtual DbSet<itemModelGroup> itemModelGroups { get; set; }
        public virtual DbSet<itemSalesTaxGroup> itemSalesTaxGroups { get; set; }
        public virtual DbSet<taxSetup> taxSetups { get; set; }
        public virtual DbSet<vwItemSalesTaxSetup> vwItemSalesTaxSetups { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<vwDistributor> vwDistributors { get; set; }
        public virtual DbSet<vwPrincipal> vwPrincipals { get; set; }
        public virtual DbSet<vwSupplier> vwSuppliers { get; set; }
        public virtual DbSet<charge> charges { get; set; }
        public virtual DbSet<componentSetup> componentSetups { get; set; }
        public virtual DbSet<vwKitComponent> vwKitComponents { get; set; }
        public virtual DbSet<vwBMRX> vwBMRXes { get; set; }
        public virtual DbSet<vwPrivilegeCard> vwPrivilegeCards { get; set; }
        public virtual DbSet<vwWarehouseSetup> vwWarehouseSetups { get; set; }
        public virtual DbSet<barcode> barcodes { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<vwProduct> vwProducts { get; set; }
        public virtual DbSet<vwProductList> vwProductLists { get; set; }
    
        public virtual ObjectResult<string> sp_catHierarchy(string action, string code, string rID, string desc, string rType, string process, Nullable<bool> status, string code2)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var processParameter = process != null ?
                new ObjectParameter("process", process) :
                new ObjectParameter("process", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var code2Parameter = code2 != null ?
                new ObjectParameter("code2", code2) :
                new ObjectParameter("code2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_catHierarchy", actionParameter, codeParameter, rIDParameter, descParameter, rTypeParameter, processParameter, statusParameter, code2Parameter);
        }
    
        public virtual int sp_Product(string action, string sKU, string suppID, string brandID, string pDimension, string itemDesc, Nullable<bool> isConcession, Nullable<int> userID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var suppIDParameter = suppID != null ?
                new ObjectParameter("suppID", suppID) :
                new ObjectParameter("suppID", typeof(string));
    
            var brandIDParameter = brandID != null ?
                new ObjectParameter("brandID", brandID) :
                new ObjectParameter("brandID", typeof(string));
    
            var pDimensionParameter = pDimension != null ?
                new ObjectParameter("pDimension", pDimension) :
                new ObjectParameter("pDimension", typeof(string));
    
            var itemDescParameter = itemDesc != null ?
                new ObjectParameter("itemDesc", itemDesc) :
                new ObjectParameter("itemDesc", typeof(string));
    
            var isConcessionParameter = isConcession.HasValue ?
                new ObjectParameter("isConcession", isConcession) :
                new ObjectParameter("isConcession", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Product", actionParameter, sKUParameter, suppIDParameter, brandIDParameter, pDimensionParameter, itemDescParameter, isConcessionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_PurchaseOrder_Result> sp_PurchaseOrder(string action, string desc, string userID, string poolID, string poolDesc, Nullable<int> modID, string modDesc, string days, Nullable<int> discountID, string dDesc, string percent, Nullable<bool> isActive, string delAddressID, string delDesc, string remarks, Nullable<int> addressID, string tID, string address, string city, string province, string purpose, Nullable<bool> isPrimary, string orderNo, Nullable<System.DateTime> deliverydate, Nullable<System.DateTime> cancelDate, string salesTax, string status, Nullable<long> lineID, string barcode, Nullable<double> qty)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var poolIDParameter = poolID != null ?
                new ObjectParameter("poolID", poolID) :
                new ObjectParameter("poolID", typeof(string));
    
            var poolDescParameter = poolDesc != null ?
                new ObjectParameter("poolDesc", poolDesc) :
                new ObjectParameter("poolDesc", typeof(string));
    
            var modIDParameter = modID.HasValue ?
                new ObjectParameter("modID", modID) :
                new ObjectParameter("modID", typeof(int));
    
            var modDescParameter = modDesc != null ?
                new ObjectParameter("modDesc", modDesc) :
                new ObjectParameter("modDesc", typeof(string));
    
            var daysParameter = days != null ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(string));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("discountID", discountID) :
                new ObjectParameter("discountID", typeof(int));
    
            var dDescParameter = dDesc != null ?
                new ObjectParameter("dDesc", dDesc) :
                new ObjectParameter("dDesc", typeof(string));
    
            var percentParameter = percent != null ?
                new ObjectParameter("percent", percent) :
                new ObjectParameter("percent", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var delAddressIDParameter = delAddressID != null ?
                new ObjectParameter("delAddressID", delAddressID) :
                new ObjectParameter("delAddressID", typeof(string));
    
            var delDescParameter = delDesc != null ?
                new ObjectParameter("delDesc", delDesc) :
                new ObjectParameter("delDesc", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("addressID", addressID) :
                new ObjectParameter("addressID", typeof(int));
    
            var tIDParameter = tID != null ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("purpose", purpose) :
                new ObjectParameter("purpose", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("deliverydate", deliverydate) :
                new ObjectParameter("deliverydate", typeof(System.DateTime));
    
            var cancelDateParameter = cancelDate.HasValue ?
                new ObjectParameter("cancelDate", cancelDate) :
                new ObjectParameter("cancelDate", typeof(System.DateTime));
    
            var salesTaxParameter = salesTax != null ?
                new ObjectParameter("salesTax", salesTax) :
                new ObjectParameter("salesTax", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var lineIDParameter = lineID.HasValue ?
                new ObjectParameter("lineID", lineID) :
                new ObjectParameter("lineID", typeof(long));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseOrder_Result>("sp_PurchaseOrder", actionParameter, descParameter, userIDParameter, poolIDParameter, poolDescParameter, modIDParameter, modDescParameter, daysParameter, discountIDParameter, dDescParameter, percentParameter, isActiveParameter, delAddressIDParameter, delDescParameter, remarksParameter, addressIDParameter, tIDParameter, addressParameter, cityParameter, provinceParameter, purposeParameter, isPrimaryParameter, orderNoParameter, deliverydateParameter, cancelDateParameter, salesTaxParameter, statusParameter, lineIDParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual int sp_Reports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Reports");
        }
    
        public virtual ObjectResult<sp_reportPO_Result> sp_reportPO(string orderNo)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_reportPO_Result>("sp_reportPO", orderNoParameter);
        }
    
        public virtual ObjectResult<sp_Hierarchy_Result> sp_Hierarchy(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("profileID", profileID) :
                new ObjectParameter("profileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Hierarchy_Result>("sp_Hierarchy", profileIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_autoInc(string desc)
        {
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_autoInc", descParameter);
        }
    
        public virtual ObjectResult<sp_catValidation_Result1> sp_catValidation(string action, Nullable<long> rID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_catValidation_Result1>("sp_catValidation", actionParameter, rIDParameter);
        }
    
        public virtual ObjectResult<sp_Supplier_Result> sp_Supplier(string tableName, string action, string distriID, string suppID, string itemTaxID, Nullable<int> payID, Nullable<int> sGroupID, string name, string rType, string agent, string rID, Nullable<bool> isDistributor, Nullable<bool> isActive, Nullable<int> userID, Nullable<int> addressID, string address, string city, string province, string purpose, Nullable<bool> isPrimary, Nullable<int> contactID, Nullable<int> typeID, string tDesc, string cDesc)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var distriIDParameter = distriID != null ?
                new ObjectParameter("distriID", distriID) :
                new ObjectParameter("distriID", typeof(string));
    
            var suppIDParameter = suppID != null ?
                new ObjectParameter("suppID", suppID) :
                new ObjectParameter("suppID", typeof(string));
    
            var itemTaxIDParameter = itemTaxID != null ?
                new ObjectParameter("itemTaxID", itemTaxID) :
                new ObjectParameter("itemTaxID", typeof(string));
    
            var payIDParameter = payID.HasValue ?
                new ObjectParameter("payID", payID) :
                new ObjectParameter("payID", typeof(int));
    
            var sGroupIDParameter = sGroupID.HasValue ?
                new ObjectParameter("sGroupID", sGroupID) :
                new ObjectParameter("sGroupID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var agentParameter = agent != null ?
                new ObjectParameter("agent", agent) :
                new ObjectParameter("agent", typeof(string));
    
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var isDistributorParameter = isDistributor.HasValue ?
                new ObjectParameter("isDistributor", isDistributor) :
                new ObjectParameter("isDistributor", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("addressID", addressID) :
                new ObjectParameter("addressID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("purpose", purpose) :
                new ObjectParameter("purpose", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(int));
    
            var tDescParameter = tDesc != null ?
                new ObjectParameter("tDesc", tDesc) :
                new ObjectParameter("tDesc", typeof(string));
    
            var cDescParameter = cDesc != null ?
                new ObjectParameter("cDesc", cDesc) :
                new ObjectParameter("cDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Supplier_Result>("sp_Supplier", tableNameParameter, actionParameter, distriIDParameter, suppIDParameter, itemTaxIDParameter, payIDParameter, sGroupIDParameter, nameParameter, rTypeParameter, agentParameter, rIDParameter, isDistributorParameter, isActiveParameter, userIDParameter, addressIDParameter, addressParameter, cityParameter, provinceParameter, purposeParameter, isPrimaryParameter, contactIDParameter, typeIDParameter, tDescParameter, cDescParameter);
        }
    }
}
